May 2 Assignment 
 "1. Find the second minimum element in the array -> Come up with two appoaches and find which is best
1 st approach
package DsaPractice;
import java.util.Scanner;
import java.util.Arrays;
public class findSecondSmallest {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the size of the array");
		
		int n=sc.nextInt();
		
		int[]arr=new int[n];
		System.out.println("Enter a Arrays");
		for(int i=0;i<n;i++) {
		 arr[i]=sc.nextInt();
		}
		for(int i=0;i<n;i++) {
			for(int j=i+1;j<n;j++) {
				if(arr[i]<arr[j]) {
					
				
				int temp=arr[i];
				arr[i]=arr[j];
				arr[j]=temp;
				}
			}
		}
	
		System.out.println("Second Smallest element is "+arr[n-2]);  
    }
	}
----------------------------------
2nd approach
import java.util.*;  
public class SecondSmallestInArrayExample1{  
public static int getSecondSmallest(int[] a, int total){  
Arrays.sort(a);  
return a[1];  
}  
public static void main(String args[]){  
int a[]={1,2,5,6,3,2};  

System.out.println("Second Smallest: "+getSecondSmallest(a,6));  
}}  

___________________________________________________________________________
2.Find the frequency of each String in the array
{""India"", ""Australia"",""India"",""Japan""}

Output 
India - 2
Australia - 1
Japan - 1"

 public class Frequency   
{  
     public static void main(String[] args) {  
        String str = "picture perfect";  
        int[] freq = new int[str.length()];  
        int i, j;  
        char string[] = str.toCharArray();  
          
        for(i = 0; i <str.length(); i++) {  
            freq[i] = 1;  
            for(j = i+1; j <str.length(); j++) {  
                if(string[i] == string[j]) {  
                    freq[i]++;  
                    string[j] = '0';  
                }  
            }  
        }  
        System.out.println("Characters and their corresponding frequencies");  
        for(i = 0; i <freq.length; i++) {  
            if(string[i] != ' ' && string[i] != '0')  
                System.out.println(string[i] + "-" + freq[i]);  
        }  
    }  
}  
___________________________________________________________________________
May 4 Assignment
1 "Find the squares of a sorted array
https://www.geeksforgeeks.org/sort-array-converting-elements-squares/
package DsaPractice;

import java.util.Arrays;
import java.util.*;
import java.io.*;
public class SquareAndSortedArray {
	
	public static void sortSquares(int[] arr) {
		int n=arr.length;
		for(int i=0;i<n;i++) 
			arr[i]=arr[i]*arr[i];
			Arrays.sort(arr);
		}
	
	
	
 public static void main(String[] args) {
	 int arr[] = { -6, -3, -1, 2, 4, 5 };
	      int n=arr.length;
	      System.out.println("Before sort ");
	        for (int i = 0; i < n; i++)
	            System.out.print(arr[i] + " ");
	 
	        sortSquares(arr);
	        System.out.println("");
	        System.out.println("After Sort ");
	        for (int i = 0; i < n; i++)
	            System.out.print(arr[i] + " ");
	    }
	}   
_______________________________________________________________________
2 Sum of Unique elements
https://leetcode.com/problems/sum-of-unique-elements/"
class Solution {
    public int sumOfUnique(int[] nums) {
    int sum=0;
        for(int i:nums){
            boolean unique=uniqueCheck(i,nums);
            if(unique)
                sum=sum+i;
            
        }
     return sum;       
    }
    public boolean uniqueCheck(int num,int[]arr){
        int count=0;
        for(int i:arr){
            if(i==num)
                ++count;
            return false;
        }
        return true;
}
}
___________________________________________________________________________
6 may aAssignments

1"1. Encrypt the string - 2
https://practice.geeksforgeeks.org/problems/encrypt-the-string-21117/1/
import java.awt.*;
import java.util.*;
public class assign
{
 
  
  public  static String convertToHex(int num)
    {
 
        StringBuilder temp = new StringBuilder();
        while (num != 0) {
            int rem = num % 16;
            char c;
            if (rem < 10) {
                c = (char) (rem + 48);
            }
            else {
                c = (char) (rem + 87);
            }
            temp.append(c);
            num = num / 16;
        }
 
        return temp.toString();
    }
 
 
    static String encryptString(String S, int N)
    {
 
        StringBuilder ans = new StringBuilder();
 
      
        for (int i = 0; i < N; i++) {
 
            char ch = S.charAt(i);
            int count = 0;
            String hex;
 
          
            while (i < N && S.charAt(i) == ch) {
 
              
                count++;
                i++;
            }

            i--;
 
          
            hex = convertToHex(count);
 
         
            ans.append(ch);
 
    
            ans.append(hex);
        }
 
        
        ans.reverse();
 
        
        return ans.toString();
    }
     
   
    public static void main(String[] args)
    {
       
        
        String S = "abc";
        int N = S.length();
 
  
        System.out.println(encryptString(S, N));
    }
}
__________________________________________________________________________
 2. Roatating the String check
https://practice.geeksforgeeks.org/problems/check-if-string-is-rotated-by-two-places-1587115620/1"
public class Test
{

   public  static boolean isRotated(String str1, String str2)
    {
        if (str1.length() != str2.length())
            return false;
        if(str1.length() < 2)
        {
            return str1.equals(str2);
        }
      
        String clock_rot = "";
        String anticlock_rot = "";
        int len = str2.length();
        anticlock_rot = anticlock_rot +
                        str2.substring(len-2, len) +
                        str2.substring(0, len-2) ;
     
        clock_rot = clock_rot +
                    str2.substring(2) +
                    str2.substring(0, 2) ;
        return (str1.equals(clock_rot) ||
                str1.equals(anticlock_rot));
    }
     
   
    public static void main(String[] args)
    {
        String str1 = "geeks";
        String str2 = "eksge";
      
        System.out.println(isRotated(str1, str2) ?  "Yes"
                              : "No");
    }
}
____________________________________________________________________________

may 7 Assignments
1  Product of Array without itself
https://practice.geeksforgeeks.org/problems/product-array-puzzle4525/1/?page=1&difficulty[]=0&category[]=Arrays&sortBy=submissions
public class ProductArray {
   
    void productArray(int arr[], int n)
    {
 
       
        if (n == 1) {
            System.out.print(0);
            return;
        }
        
        int left[] = new int[n];
        int right[] = new int[n];
        int prod[] = new int[n];
 
        int i, j;
 
       
        left[0] = 1;
 
      
        right[n - 1] = 1;
 
  
        for (i = 1; i < n; i++)
            left[i] = arr[i - 1] * left[i - 1];
 

        for (j = n - 2; j >= 0; j--)
            right[j] = arr[j + 1] * right[j + 1];
 
       
        left[] and right[] */
        for (i = 0; i < n; i++)
            prod[i] = left[i] * right[i];
 
       
        for (i = 0; i < n; i++)
            System.out.print(prod[i] + " ");
 
        return;
    }
 
   
    public static void main(String[] args)
    {
        ProductArray pa = new ProductArray();
        int arr[] = { 10, 3, 5, 6, 2 };
        int n = arr.length;
        System.out.println("The product array is : ");
        pa.productArray(arr, n);
    }
}
___________________________________________________________________________
2. Peak element 
https://practice.geeksforgeeks.org/problems/peak-element/1
public _class GFG {
public static int findPeak(int arr[], int n)
    {
        
        if (n == 1)
            return 0;
        if (arr[0] >= arr[1])
            return 0;
        if (arr[n - 1] >= arr[n - 2])
            return n - 1;
       
        for (int i = 1; i < n - 1; i++) {
       
            if (arr[i] >= arr[i - 1] && arr[i] >= arr[i + 1])
                return i;
        }
        return 0;
    }
 
   
    public static void main(String[] args)
    {
        int arr[] = { 1, 3, 20, 4, 1, 0 };
        int n = arr.length;
        System.out.print("Index of a peak point is " + findPeak(arr, n));
    }
}
___________________________________________________________________________

 





